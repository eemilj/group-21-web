{
	"info": {
		"_postman_id": "09599939-7fd1-4383-877d-5453e94bce52",
		"name": "server Copy 4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST a user (specifying admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b079ee45-5ffc-4e6c-b153-d60bf6c5253d",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"",
							"pm.test('correct status code when user does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('expect username password and admin permissions to be posted', function(){",
							"    pm.expect(json.createdUser.username.length).to.not.eq(0);",
							"    pm.expect(json.createdUser.password.length).to.not.eq(0);",
							"    pm.expect(json.createdUser.admin.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('check if the user is being set as admin', function(){",
							"   pm.expect(true).to.eq(json.createdUser.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin22\",\"password\":\"pass\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (w/o specifying admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d797f52-fcdf-481a-8f08-33d5047b8acc",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json.createdUser._id);",
							"",
							"pm.test('correct status code when user does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})",
							"pm.test('expect username password and admin permissions to be posted', function(){",
							"    pm.expect(json.createdUser.username.length).to.not.eq(0);",
							"    pm.expect(json.createdUser.password.length).to.not.eq(0);",
							"    pm.expect(json.createdUser.admin.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('the default administrator permissions should be assigned from the backend', function(){",
							"    var json = pm.response.json();",
							"    pm.expect(false).to.eq(json.createdUser.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"newuser\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (specifying admin) but the user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d6d4e77-c836-45cf-af14-5e5e08864668",
						"exec": [
							"pm.test('status code 409 when user exists', function(){",
							"    pm.response.to.have.status(409);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin22\",\"password\":\"pass\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (w/o specifying admin) but the user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31676945-4f49-4155-866d-3fb6d1507872",
						"exec": [
							"pm.test('status code 409 when user exists', function(){",
							"    pm.response.to.have.status(409);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"newuser\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET user with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "701d7bd9-1a4b-43de-9295-d821c32b7726",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"",
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('expect to receive non empty user fields', function(){",
							"    pm.expect(json.username).to.not.null;",
							"    pm.expect(json.password).to.not.null;",
							"    pm.expect(json.admin).to.not.null;",
							"})",
							"",
							"pm.test('correct username and permissions are being returned', function(){",
							"   pm.expect('newuser').to.eq(json.username);",
							"   pm.expect(false).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84340e93-665a-45a8-a01f-d22a9507cdce",
						"exec": [
							"pm.test('correct status code when users do exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET when user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "85bdf3f5-6e20-44b4-97c3-8f3d02881d29",
						"exec": [
							"pm.test('status code 404 when a user with the specified ID not found', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a user with an invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "247249c3-9315-435f-afde-c5115c8a63f3",
						"exec": [
							"pm.test('status code 500 when when trying to delete a user without a proper ID', function(){",
							"    pm.response.to.have.status(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/id123",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"id123"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de468e85-9660-4453-b744-277d1d5ee1b7",
						"exec": [
							"pm.test('correct status code when user does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when creating a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('new_user_put').to.eq(json.username);",
							"   pm.expect('new_pass_put').to.eq(json.password);",
							"   pm.expect(true).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with ID -  user does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "55db5a88-6c67-436f-8988-5f531bdc81bc",
						"exec": [
							"pm.test('status code 404 when user does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/5f635f95f9243e0bf8c720e1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"5f635f95f9243e0bf8c720e1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4cb98918-b138-4dd1-9f8a-97167612647c",
						"exec": [
							"pm.test('status code 500 when user has invalid ID', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with ID - changing admin permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f0edf87-15ab-4145-9564-8240fcdab849",
						"exec": [
							"pm.test('correct status code when user does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when patching a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(false).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with ID - user does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e665c232-422f-49b6-85f0-de7241dc954a",
						"exec": [
							"pm.test('status code 404 when user does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/5f635f95f9243e0bf8c720e1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"5f635f95f9243e0bf8c720e1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60e3e6b4-02dd-4ab3-b911-d2e9f6eb4bd0",
						"exec": [
							"pm.test('status code 500 when user id is invalid', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a user by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2553b306-3e2b-467c-a878-2d52accd8be6",
						"exec": [
							"pm.test('correct status code when user does exist and DELETE them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('new_user_put').to.eq(json.username);",
							"   pm.expect('new_pass_put').to.eq(json.password);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all users - currently checking for one",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe5ca7c6-e6f2-4b8c-b5de-a7bd51653d92",
						"exec": [
							"pm.test('correct status code', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting the two users that exists in the collection', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(1).to.eq(json.n);",
							"   pm.expect(1).to.eq(json.ok);",
							"   pm.expect(1).to.eq(json.deletedCount);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8799a04b-9b1d-4fd2-bd68-16d3b5180ee1",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"group_id\", json.createdGroup._id);",
							"",
							"pm.test('correct status code when group does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   pm.expect('Group').to.eq(json.createdGroup.name);",
							"   pm.expect('Stockholm').to.eq(json.createdGroup.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.createdGroup.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.createdGroup.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.createdGroup.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\",\n    \"owner\": \"5f86bc212f4b1c64a11e952b\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "665ca163-9910-420c-acaf-b316a6175124",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"group_id\", json.createdGroup._id);",
							"",
							"pm.test('correct status code when group does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   pm.expect('Group1').to.eq(json.createdGroup.name);",
							"   pm.expect('Gothenburg').to.eq(json.createdGroup.location);",
							"   pm.expect('5f63d49e36d3a338113801a2').to.eq(json.createdGroup.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.createdGroup.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.createdGroup.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group1\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"5f63d49e36d3a338113801a2\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\",\n    \"owner\": \"5f86bc212f4b1c64a11e952b\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a group but it exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "085456ac-acfb-4fd6-b477-9351bb18d760",
						"exec": [
							"pm.test('status code 500 when group exists', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group1\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\",\n    \"owner\": \"5f86bc212f4b1c64a11e952b\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "402fc8ea-b7d1-416d-b4ef-ab93957b8c86",
						"exec": [
							"pm.test('correct status code when users do exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET group with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b004371-6449-4c45-b99b-6651214e2b63",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group1').to.eq(json.name);",
							"   pm.expect('Gothenburg').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801a2').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET when group not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2609d9d2-04fc-4a4a-bd2f-2e47491af567",
						"exec": [
							"pm.test('status code 404 when a group with the specified ID not found', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e878",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e878"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "30fb5876-6bf0-4065-842e-b10fd330b8b9",
						"exec": [
							"pm.test('correct status code when group does not exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group2').to.eq(json.name);",
							"   pm.expect('Stockholm').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with ID - group does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7a26292-6e1e-4953-a91a-7667fe222657",
						"exec": [
							"pm.test('status code 404 when group does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e871",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e871"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f71d13e-b66a-47d5-8992-b62a573a7b9a",
						"exec": [
							"pm.test('status code 500 when group has invalid ID', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/invalidGroupID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"invalidGroupID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with ID - changing location",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bdd033b7-b856-49e0-8416-9e8ec2704afc",
						"exec": [
							"pm.test('correct status code when group does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when patching a group', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(\"Uppsala\").to.eq(json.location);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Uppsala\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with ID - group does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aaf2d514-94f8-4998-844e-ee92d2dd8356",
						"exec": [
							"pm.test('status code 404 when group does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Gothenburg\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e871",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e871"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eab5668b-f260-40d7-b35d-ae1c0cd8f412",
						"exec": [
							"pm.test('status code 500 when group id is invalid', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Gothenburg\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/invalidGroupID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"invalidGroupID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE group by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc1a7c35-36c7-49b1-9b0d-e118af813d27",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group2').to.eq(json.name);",
							"   pm.expect('Uppsala').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a group that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b0eef99-dc92-433c-9261-d02fb78565f4",
						"exec": [
							"pm.test('status code 500 when when trying to delete a group that does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f637b4fa41c610cb8c4a6ec",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f637b4fa41c610cb8c4a6ec"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a group with an invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74903bed-b687-4e81-af33-a16da6c58306",
						"exec": [
							"pm.test('status code 500 when when trying to delete a user without a proper ID', function(){",
							"    pm.response.to.have.status(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f63",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all groups - currently checking for two",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d0f6f8c-6f65-4c0d-91f6-dff1c8e01f58",
						"exec": [
							"pm.test('correct status code', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting the two users that exists in the collection', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(1).to.eq(json.n);",
							"   pm.expect(1).to.eq(json.ok);",
							"   pm.expect(1).to.eq(json.deletedCount);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8be0b9e-c3fd-4d31-b4c5-43293be01b1e",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"review_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Review created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has valid data\", function(){\r",
							"    pm.expect(jsonData.subject).to.eql('rough start');\r",
							"    pm.expect(jsonData.author).to.eql(\"5f620b07171db72678abb4b7\");\r",
							"    pm.expect(jsonData.reviewee).to.eql(\"5f620b07171db72628abb4b3\");\r",
							"    pm.expect(jsonData.rating).to.eql(5);\r",
							"    pm.expect(jsonData.subject).to.eql(\"rough start\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db72678abb4b7\", \"reviewee\": \"5f620b07171db72628abb4b3\", \"rating\": 5, \"subject\": \"rough start\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get review by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "68f55995-30c5-4c62-ac62-342942ddc858",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review found\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review data has valid types\", function(){\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.reviewee).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.rating).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.subject).to.be.a(\"string\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb66e451-7f19-44b9-8460-e98fba6eb77b",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Reviews found\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Patch review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "30045349-09bb-499a-9c62-08c2b3626a68",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has expected changes\", function(){\r",
							"    pm.expect(jsonData.subject).to.eql(\"Getting there\");\r",
							"    pm.expect(jsonData.rating).to.eql(10);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rating\": 10, \"subject\": \"Getting there\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch review with invalid rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c7f397d-818c-4598-8253-58e5ea693023",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Couldn't update, invalid type\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"pm.test(\"Correct error message\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rating\": \"You think you can fool me?\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Put review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ba8732b8-8655-44b4-9bd1-0d22d7bf3021",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has expected changes\", function(){\r",
							"    pm.expect(jsonData.author).to.eql(\"5f620b07171db75578abb4b2\");\r",
							"    pm.expect(jsonData.reviewee).to.eql(\"5f620b07271db77638abb4b1\");\r",
							"    pm.expect(jsonData.subject).to.eql(\"It works\");\r",
							"    pm.expect(jsonData.rating).to.eql(8);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db75578abb4b2\", \"reviewee\": \"5f620b07271db77638abb4b1\", \"rating\": 8, \"subject\": \"It works\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put review with invalid rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2530927f-50bb-4af8-8b35-7f652a22d8ef",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db75578abb4b2\", \"reviewee\": \"5f620b07271db77638abb4b1\", \"rating\": \"heyy\", \"subject\": \"It works\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "be99010f-8f32-4a80-a9d1-04347ce9bacd",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review deleted\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Post review for delete all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b35665bc-cdfe-4ce5-8aa5-62e3673912a3",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db72678abb4b7\", \"reviewee\": \"5f620b07171db72628abb4b3\", \"rating\": 5, \"subject\": \"rough start\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Delete all reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21c02548-8917-4a4a-86ed-0f5b4a86e583",
						"exec": [
							"pm.test(\"Review deleted\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get review with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d11f654c-9e64-4dcb-991e-0874a43f4e46",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review not found\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get reviews, none found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ca078b6-b003-4f8f-9662-c65ecc1d8070",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"No reviews found 404\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Review data has valid types\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"No reviews found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Delete user with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e48bcfee-846a-4db7-938f-275fd7277104",
						"exec": [
							"pm.test(\"Invalid ID to delete\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Post activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1435a35f-a6dd-4746-98eb-835cecd2006f",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"correct activity created\", function(){\r",
							"    pm.expect(\"Junior Summer Soccer Teams70\").to.eq(json.createdActivity.name);\r",
							"    pm.expect(\"Soccer\").to.eq(json.createdActivity.activity_type);\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer Teams70\", \"activity_type\":\"Soccer\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "710a833c-f1b4-4714-b090-79e9cb1b97c2",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "320fec24-9220-4e3c-b135-d18a39271e8a",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test(\"Correct activity response\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.activity_type).to.eql(pm.environment.get(\"activity_type\")); \r",
							"    }); \r",
							"\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities?activity_type=Soccer",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					],
					"query": [
						{
							"key": "activity_type",
							"value": "Soccer"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "non existant activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75afa3bc-99e3-4026-915f-b376d3013235",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"// assert certain error message "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/1f63a07deb8c0c2ee4b2dc1e",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"1f63a07deb8c0c2ee4b2dc1e"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603679cc-4374-405c-8a65-e0d6a066d3c9",
						"exec": [
							"pm.test(\"Correct activity response\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    }); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity PUT ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae062cfe-fc6b-4e98-91cf-306597edb836",
						"exec": [
							"pm.test(\"correct status code when the activity existss \", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"correct json returned\", function(){\r",
							"    var json = pm.response.json();\r",
							"    pm.expect(\"Junior Summer Soccer 2022\").to.eq(json.name);\r",
							"    pm.expect(\"Soccer1\").to.eq(json.activity_type);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer 2022\", \"activity_type\" : \"Soccer1\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity PATCH ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a80f444d-8d62-4f76-8a76-48dd287e38f5",
						"exec": [
							"pm.test(\"correct status when we patch\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"correct json returned when patching\", function(){\r",
							"    var json = pm.response.json();\r",
							"    pm.expect(\"hi hi\").to.eq(json.name);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"hi hi\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity DELETE ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd3ac163-0a82-42a7-b48d-1d4a74388c6b",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cb1af87-0504-4c8e-bbf9-93265d278fd1",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"correct activity created\", function(){\r",
							"    pm.expect(\"Junior Summer Soccer Teams72\").to.eq(json.createdActivity.name);\r",
							"    pm.expect(\"Soccer\").to.eq(json.createdActivity.activity_type);\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer Teams72\", \"activity_type\":\"Soccer\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e759ba7f-cbc7-4fac-b66e-243c544f161e",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post activity for relationship",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20706498-142e-4fa7-afeb-3aa7638ce51d",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"rel_activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"New Activity\", \"activity_type\":\"Football\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post group for activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9d5d5e2-5504-4d5c-926d-8005be5c6f9d",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"rel_group_id\", jsonData.createdGroup._id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"New Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\",\n    \"owner\": \"5f86bc212f4b1c64a11e952b\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups in activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b6375d6-fb75-40a9-85f3-37ae9895b770",
						"exec": [
							"pm.test(\"GET all groups in specific activity\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups in activity Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "829e48a6-be9a-4d69-b161-5b331cce281b",
						"exec": [
							"pm.test(\"GET one group in specific activity\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups/{{rel_group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups",
						"{{rel_group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE group in activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e470a89e-5c14-4de3-ab64-af5dea7f7ca8",
						"exec": [
							"pm.test(\"Group deleted\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups/{{rel_group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups",
						"{{rel_group_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0d6fd9a8-1409-4302-8cde-97584ccf34dd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "05a3c8c8-05f8-4710-9182-ca3a6e8de273",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}