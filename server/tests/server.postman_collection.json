{
	"info": {
		"_postman_id": "445d13d2-82eb-4448-9c93-8b725cf2edb6",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST a user (specifying admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e388db63-08b5-45e5-8edf-1d5c9259bdc4",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"",
							"pm.test('correct status code when user does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a user', function(){",
							"   pm.expect('admin22').to.eq(json.createdUser.username);",
							"   pm.expect('pass').to.eq(json.createdUser.password);",
							"   pm.expect(true).to.eq(json.createdUser.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin22\",\"password\":\"pass\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (w/o specifying admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e9e42fb-5885-485d-a580-34950e5c66e5",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json.createdUser._id);",
							"",
							"pm.test('correct status code when user does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a user', function(){",
							"   pm.expect('newuser').to.eq(json.createdUser.username);",
							"   pm.expect('pass').to.eq(json.createdUser.password);",
							"})",
							"",
							"pm.test('the default administrator permissions should be assigned from the backend', function(){",
							"    var json = pm.response.json();",
							"    pm.expect(false).to.eq(json.createdUser.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"newuser\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (specifying admin) but the user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6c9b6499-7395-4d07-a149-cc4430e50bd0",
						"exec": [
							"pm.test('status code 409 when user exists', function(){",
							"    pm.response.to.have.status(409);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin22\",\"password\":\"pass\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (w/o specifying admin) but the user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69cb31ca-4b80-4314-86ea-bbb86a77f48e",
						"exec": [
							"pm.test('status code 409 when user exists', function(){",
							"    pm.response.to.have.status(409);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"newuser\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET user with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53ab766c-921f-4bfd-b989-b5ef24a27573",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('newuser').to.eq(json.username);",
							"   pm.expect('pass').to.eq(json.password);",
							"   pm.expect(false).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ed19f2e-1c41-4597-a614-e52b1e25619b",
						"exec": [
							"pm.test('correct status code when users do exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET when user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc45b923-2047-4b90-af06-1c4bd0d83b22",
						"exec": [
							"pm.test('status code 404 when a user with the specified ID not found', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a user with an invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6754d6cf-6f2a-41ed-817e-4c314053755f",
						"exec": [
							"pm.test('status code 500 when when trying to delete a user without a proper ID', function(){",
							"    pm.response.to.have.status(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/id123",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"id123"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d7db65b-315f-4859-918e-02c5c361eaca",
						"exec": [
							"pm.test('correct status code when user does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when creating a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('new_user_put').to.eq(json.username);",
							"   pm.expect('new_pass_put').to.eq(json.password);",
							"   pm.expect(true).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with ID -  user does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ba8604bf-e717-40fb-ad50-07b66d0368a4",
						"exec": [
							"pm.test('status code 404 when user does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/5f635f95f9243e0bf8c720e1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"5f635f95f9243e0bf8c720e1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2d2bb31-20a0-4048-a6c9-76975417e34a",
						"exec": [
							"pm.test('status code 500 when user has invalid ID', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with ID - changing admin permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d8ccea3-be0c-4613-a056-3a0a09dce13c",
						"exec": [
							"pm.test('correct status code when user does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when patching a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(false).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with ID - user does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1c74974-f732-4367-b2e6-22f0f995fede",
						"exec": [
							"pm.test('status code 404 when user does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/5f635f95f9243e0bf8c720e1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"5f635f95f9243e0bf8c720e1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ecd040a-90fc-4ca2-8de5-65fc1e324d52",
						"exec": [
							"pm.test('status code 500 when user id is invalid', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a user by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0bd81067-8138-4bb8-bb98-a39565fd0e84",
						"exec": [
							"pm.test('correct status code when user does exist and DELETE them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('new_user_put').to.eq(json.username);",
							"   pm.expect('new_pass_put').to.eq(json.password);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all users - currently checking for one",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8da65e5a-3cff-41e5-b994-880dde95aa69",
						"exec": [
							"pm.test('correct status code', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting the two users that exists in the collection', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(1).to.eq(json.n);",
							"   pm.expect(1).to.eq(json.ok);",
							"   pm.expect(1).to.eq(json.deletedCount);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "233c1b46-e1a7-429d-a871-4ddac83d1ea3",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"group_id\", json.createdGroup._id);",
							"",
							"pm.test('correct status code when group does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   pm.expect('Group').to.eq(json.createdGroup.name);",
							"   pm.expect('Stockholm').to.eq(json.createdGroup.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.createdGroup.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.createdGroup.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.createdGroup.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7e4e6c3-f7ea-4a0c-a8f6-7747912987e8",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"group_id\", json.createdGroup._id);",
							"",
							"pm.test('correct status code when group does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   pm.expect('Group1').to.eq(json.createdGroup.name);",
							"   pm.expect('Gothenburg').to.eq(json.createdGroup.location);",
							"   pm.expect('5f63d49e36d3a338113801a2').to.eq(json.createdGroup.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.createdGroup.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.createdGroup.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group1\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"5f63d49e36d3a338113801a2\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a group but it exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7d3f0dd-925d-46a3-89f6-2b1385ea3dca",
						"exec": [
							"pm.test('status code 500 when group exists', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group1\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1277c612-9774-4d4e-9a53-3ee6871f6679",
						"exec": [
							"pm.test('correct status code when users do exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET group with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb3b8741-efa4-41bb-9112-cb06c703b2b2",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group1').to.eq(json.name);",
							"   pm.expect('Gothenburg').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801a2').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET when group not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3cf118ef-8286-47db-870e-15fc44105d84",
						"exec": [
							"pm.test('status code 404 when a group with the specified ID not found', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e878",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e878"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e44e3b0-7b06-43bd-b000-906de9c99e43",
						"exec": [
							"pm.test('correct status code when group does not exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group2').to.eq(json.name);",
							"   pm.expect('Stockholm').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with ID - group does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f55f28d4-5caf-419e-94da-2708e635605b",
						"exec": [
							"pm.test('status code 404 when group does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e871",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e871"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df625706-f402-4fde-9b91-219b6ea3cba5",
						"exec": [
							"pm.test('status code 500 when group has invalid ID', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/invalidGroupID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"invalidGroupID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with ID - changing location",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "004ccde7-25b2-47e9-b065-57ee3fb21b49",
						"exec": [
							"pm.test('correct status code when group does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when patching a group', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(\"Uppsala\").to.eq(json.location);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Uppsala\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with ID - group does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d583f91d-89b8-4c3a-8500-28d3a9408ae2",
						"exec": [
							"pm.test('status code 404 when group does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Gothenburg\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e871",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e871"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e7b4b86-8e88-471a-a270-1529185a5d02",
						"exec": [
							"pm.test('status code 500 when group id is invalid', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Gothenburg\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/invalidGroupID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"invalidGroupID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE group by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad47582f-ccc7-4827-87dc-f8c2aca0a031",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group2').to.eq(json.name);",
							"   pm.expect('Uppsala').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a group that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "03837899-425f-4f56-9dba-7603edffbbf3",
						"exec": [
							"pm.test('status code 500 when when trying to delete a group that does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f637b4fa41c610cb8c4a6ec",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f637b4fa41c610cb8c4a6ec"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a group with an invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "176388c9-5851-4750-9386-1d455be287d8",
						"exec": [
							"pm.test('status code 500 when when trying to delete a user without a proper ID', function(){",
							"    pm.response.to.have.status(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f63",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all groups - currently checking for two",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22206b30-14fe-469c-8030-c50d332aa508",
						"exec": [
							"pm.test('correct status code', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting the two users that exists in the collection', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(1).to.eq(json.n);",
							"   pm.expect(1).to.eq(json.ok);",
							"   pm.expect(1).to.eq(json.deletedCount);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "42de2dc6-516b-4c87-9bba-aa2bd1c204b0",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"review_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Review created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has valid data\", function(){\r",
							"    pm.expect(jsonData.subject).to.eql('rough start');\r",
							"    pm.expect(jsonData.author).to.eql(\"5f620b07171db72678abb4b7\");\r",
							"    pm.expect(jsonData.reviewee).to.eql(\"5f620b07171db72628abb4b3\");\r",
							"    pm.expect(jsonData.rating).to.eql(5);\r",
							"    pm.expect(jsonData.subject).to.eql(\"rough start\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db72678abb4b7\", \"reviewee\": \"5f620b07171db72628abb4b3\", \"rating\": 5, \"subject\": \"rough start\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get review by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "66494fb7-b4cc-427e-9688-96c2e4b5723b",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review found\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review data has valid types\", function(){\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.reviewee).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.rating).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.subject).to.be.a(\"string\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f8e981a-eb8d-46f7-bc20-f5baa5c40391",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Reviews found\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Patch review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "032b5376-d08a-411d-8619-31ab00d1077b",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has expected changes\", function(){\r",
							"    pm.expect(jsonData.subject).to.eql(\"Getting there\");\r",
							"    pm.expect(jsonData.rating).to.eql(10);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rating\": 10, \"subject\": \"Getting there\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch review with invalid rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14ca5174-00d4-4fa1-a69f-629e2fb39052",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Couldn't update, invalid type\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"pm.test(\"Correct error message\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rating\": \"You think you can fool me?\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Put review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f6bf256-a3ad-4a38-be8f-ffaeb0ab6355",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has expected changes\", function(){\r",
							"    pm.expect(jsonData.author).to.eql(\"5f620b07171db75578abb4b2\");\r",
							"    pm.expect(jsonData.reviewee).to.eql(\"5f620b07271db77638abb4b1\");\r",
							"    pm.expect(jsonData.subject).to.eql(\"It works\");\r",
							"    pm.expect(jsonData.rating).to.eql(8);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db75578abb4b2\", \"reviewee\": \"5f620b07271db77638abb4b1\", \"rating\": 8, \"subject\": \"It works\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put review with invalid rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b2e1f901-58f2-44fa-a039-57d2f115e772",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db75578abb4b2\", \"reviewee\": \"5f620b07271db77638abb4b1\", \"rating\": \"heyy\", \"subject\": \"It works\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8be1e6fb-2ca0-4f92-ac82-4d4446714e57",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review deleted\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Post review for delete all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8fd657b0-f45d-44a1-8909-4115f73e29ba",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db72678abb4b7\", \"reviewee\": \"5f620b07171db72628abb4b3\", \"rating\": 5, \"subject\": \"rough start\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Delete all reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e00154b-ca58-4565-b841-a6c20b26c8bf",
						"exec": [
							"pm.test(\"Review deleted\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get review with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83677c64-a7ab-4434-9937-c9dd70a04a82",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review not found\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get reviews, none found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a677bcbe-1a52-49b2-8e7e-3aeef2cd5397",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"No reviews found 404\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Review data has valid types\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"No reviews found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Delete user with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1714c31e-db88-4d80-b7ea-08902c053bc8",
						"exec": [
							"pm.test(\"Invalid ID to delete\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Post activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "545cbec8-0840-4edc-b8cb-30c4e6b40809",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"correct activity created\", function(){\r",
							"    pm.expect(\"Junior Summer Soccer Teams70\").to.eq(json.createdActivity.name);\r",
							"    pm.expect(\"Soccer\").to.eq(json.createdActivity.activity_type);\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer Teams70\", \"activity_type\":\"Soccer\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f16c6986-f142-44bb-83f9-856260112916",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7fc6c6b-3f5e-4fd5-aa0d-daf811c0afd5",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test(\"Correct activity response\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.activity_type).to.eql(pm.environment.get(\"activity_type\")); \r",
							"    }); \r",
							"\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities?activity_type=Soccer",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					],
					"query": [
						{
							"key": "activity_type",
							"value": "Soccer"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "non existant activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dfc9f38-f168-4d70-a3df-651596097425",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"// assert certain error message "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/1f63a07deb8c0c2ee4b2dc1e",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"1f63a07deb8c0c2ee4b2dc1e"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d6bf5e74-ae9c-4515-a9c0-9dd54933f721",
						"exec": [
							"pm.test(\"Correct activity response\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    }); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity PUT ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a4e2042f-ffc9-4197-9183-80cc9758b3ab",
						"exec": [
							"pm.test(\"correct status code when the activity existss \", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"correct json returned\", function(){\r",
							"    var json = pm.response.json();\r",
							"    pm.expect(\"Junior Summer Soccer 2022\").to.eq(json.name);\r",
							"    pm.expect(\"Soccer1\").to.eq(json.activity_type);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer 2022\", \"activity_type\" : \"Soccer1\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity PATCH ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d885a08a-7919-4a63-b715-c3a9e10b86de",
						"exec": [
							"pm.test(\"correct status when we patch\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"correct json returned when patching\", function(){\r",
							"    var json = pm.response.json();\r",
							"    pm.expect(\"hi hi\").to.eq(json.name);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"hi hi\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity DELETE ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b0e6f45-5793-4a45-9713-df44cba9aa17",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f50c268-6e00-490f-8de3-267b483421ba",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"correct activity created\", function(){\r",
							"    pm.expect(\"Junior Summer Soccer Teams72\").to.eq(json.createdActivity.name);\r",
							"    pm.expect(\"Soccer\").to.eq(json.createdActivity.activity_type);\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer Teams72\", \"activity_type\":\"Soccer\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6fc5f40-e135-4cdb-b846-76d391dfbf8d",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post activity for relationship",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "91b42469-131d-486b-949c-633a287f1910",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"rel_activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"New Activity\", \"activity_type\":\"Football\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post group for activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0351619b-5d14-4262-8ff3-0edc054dddbf",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"rel_group_id\", jsonData.createdGroup._id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"New Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups in activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "377f7e52-a7b1-42c5-b618-5cfa41356c55",
						"exec": [
							"pm.test(\"GET all groups in specific activity\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups in activity Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5b4d0e8-98fe-4151-a8e4-cb1e61e629e6",
						"exec": [
							"pm.test(\"GET one group in specific activity\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups/{{rel_group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups",
						"{{rel_group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE group in activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "68e339b8-3f80-49f7-b5eb-0052fa1fa1c4",
						"exec": [
							"pm.test(\"Group deleted\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups/{{rel_group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups",
						"{{rel_group_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "48ffbe90-6702-4ba0-9ae1-132ad490d102",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "05a59c29-70bb-4855-86e2-da0b084323bd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}