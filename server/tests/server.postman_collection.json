{
	"info": {
		"_postman_id": "ba08334a-4f57-40d7-88db-4f221fd7f1d9",
		"name": "server Copy 4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST a user (specifying admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b91a4d81-089a-4b55-a076-8bdf30020be4",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"",
							"pm.test('correct status code when user does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('expect username password and admin permissions to be posted', function(){",
							"    pm.expect(json.createdUser.username.length).to.not.eq(0);",
							"    pm.expect(json.createdUser.password.length).to.not.eq(0);",
							"    pm.expect(json.createdUser.admin.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('check if the user is being set as admin', function(){",
							"   pm.expect(true).to.eq(json.createdUser.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin22\",\"password\":\"pass\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (w/o specifying admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2ac80f44-e772-4a6d-a5d2-2c80c0166b91",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json.createdUser._id);",
							"",
							"pm.test('correct status code when user does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})",
							"pm.test('expect username password and admin permissions to be posted', function(){",
							"    pm.expect(json.createdUser.username.length).to.not.eq(0);",
							"    pm.expect(json.createdUser.password.length).to.not.eq(0);",
							"    pm.expect(json.createdUser.admin.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('the default administrator permissions should be assigned from the backend', function(){",
							"    var json = pm.response.json();",
							"    pm.expect(false).to.eq(json.createdUser.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"newuser\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (specifying admin) but the user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46c006e0-da33-489a-b926-ab2bb42574b7",
						"exec": [
							"pm.test('status code 409 when user exists', function(){",
							"    pm.response.to.have.status(409);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin22\",\"password\":\"pass\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (w/o specifying admin) but the user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bad9eb45-2e5e-444e-a9ca-8bd67ca9b3cf",
						"exec": [
							"pm.test('status code 409 when user exists', function(){",
							"    pm.response.to.have.status(409);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"newuser\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET user with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81155405-472f-48c8-b815-77b01a595269",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"",
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('expect to receive non empty user fields', function(){",
							"    pm.expect(json.username).to.not.null;",
							"    pm.expect(json.password).to.not.null;",
							"    pm.expect(json.admin).to.not.null;",
							"})",
							"",
							"pm.test('correct username and permissions are being returned', function(){",
							"   pm.expect('newuser').to.eq(json.username);",
							"   pm.expect(false).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7190149-5e01-42b0-ae8b-5d321eca027d",
						"exec": [
							"pm.test('correct status code when users do exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET when user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ec9c27d-3883-4a4f-8f0f-900517733ff5",
						"exec": [
							"pm.test('status code 404 when a user with the specified ID not found', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a user with an invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1367d203-84c2-45a7-b9af-94a98dd3781f",
						"exec": [
							"pm.test('status code 500 when when trying to delete a user without a proper ID', function(){",
							"    pm.response.to.have.status(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/id123",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"id123"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0d44bdc0-8416-484a-897f-14941e645b52",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"",
							"pm.test('correct status code when user does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('expect username password and admin permissions to be send', function(){",
							"    pm.expect(json.username.length).to.not.eq(0);",
							"    pm.expect(json.password.length).to.not.eq(0);",
							"    pm.expect(json.admin.length).to.not.eq(0);",
							"})",
							"",
							"pm.test('check if the user is being set as admin', function(){",
							"   pm.expect(true).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with ID -  user does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11f60dc9-f806-4d02-918e-bc0454212b15",
						"exec": [
							"pm.test('status code 404 when user does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/5f635f95f9243e0bf8c720e1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"5f635f95f9243e0bf8c720e1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62e7d847-0dcb-4d88-8e1d-667077106e92",
						"exec": [
							"pm.test('status code 500 when user has invalid ID', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with ID - changing admin permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00735756-dd44-4e8a-8f9a-6cddddca9b2b",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"pm.test('correct status code when user does exist and PATCH successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})",
							"pm.test('correct JSON returned when patching a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(false).to.eq(json.admin);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\": \"false\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with ID - user does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6dc0bb40-b8ac-48e7-96c9-a4907c721d32",
						"exec": [
							"pm.test('status code 404 when user does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/5f635f95f9243e0bf8c720e1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"5f635f95f9243e0bf8c720e1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1cd82e4b-929f-4d44-b3a1-77ba7bd4ddec",
						"exec": [
							"pm.test('status code 500 when user id is invalid', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a user by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "66c1fd19-4c39-4afd-82ce-bee1c79cf7b5",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"",
							"pm.test('correct status code when user does exist and DELETE them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('check JSON response not empty', function(){",
							"    pm.expect(json).to.not.null;",
							"    pm.expect(json.length).to.not.eq(0);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all users - currently checking for one",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c174b6e3-b462-44e4-9c38-0a44042c0ea7",
						"exec": [
							"pm.test('correct status code', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting the two users that exists in the collection', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(1).to.eq(json.n);",
							"   pm.expect(1).to.eq(json.ok);",
							"   pm.expect(1).to.eq(json.deletedCount);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1b76986-8fc4-4270-a389-d311e24a2692",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"group_id\", json.createdGroup._id);",
							"",
							"pm.test('correct status code when group does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   pm.expect('Group').to.eq(json.createdGroup.name);",
							"   pm.expect('Stockholm').to.eq(json.createdGroup.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.createdGroup.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.createdGroup.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.createdGroup.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\",\n    \"owner\": \"5f86bc212f4b1c64a11e952b\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b0670402-f0dc-407c-a402-eee0a4f31764",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"group_id\", json.createdGroup._id);",
							"",
							"pm.test('correct status code when group does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   pm.expect('Group1').to.eq(json.createdGroup.name);",
							"   pm.expect('Gothenburg').to.eq(json.createdGroup.location);",
							"   pm.expect('5f63d49e36d3a338113801a2').to.eq(json.createdGroup.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.createdGroup.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.createdGroup.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group1\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"5f63d49e36d3a338113801a2\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\",\n    \"owner\": \"5f86bc212f4b1c64a11e952b\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a group but it exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "380b2eff-5553-475b-9871-b63fb259a84f",
						"exec": [
							"pm.test('status code 500 when group exists', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group1\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\",\n    \"owner\": \"5f86bc212f4b1c64a11e952b\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b22c5f9a-f8f8-4c2a-bf39-1027d9fa446e",
						"exec": [
							"pm.test('correct status code when users do exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET group with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84dabe93-e018-44ee-abbb-017b56c20413",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group1').to.eq(json.name);",
							"   pm.expect('Gothenburg').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801a2').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET when group not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ea890cc-4834-47c4-a7cc-256ad36e8bc5",
						"exec": [
							"pm.test('status code 404 when a group with the specified ID not found', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e878",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e878"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ed3457d-327f-4390-9506-f00315829e7b",
						"exec": [
							"pm.test('correct status code when group does not exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group2').to.eq(json.name);",
							"   pm.expect('Stockholm').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with ID - group does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e6c0657-153c-43d2-86c1-83997df15222",
						"exec": [
							"pm.test('status code 404 when group does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e871",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e871"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd8d84f8-15e3-4b69-96ba-717ed815fcaa",
						"exec": [
							"pm.test('status code 500 when group has invalid ID', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"5f63d49e36d3a338113801aa\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/invalidGroupID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"invalidGroupID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with ID - changing location",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cf39316-2df5-4abb-9a2f-c5650ef9515e",
						"exec": [
							"pm.test('correct status code when group does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when patching a group', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(\"Uppsala\").to.eq(json.location);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Uppsala\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with ID - group does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee5103cf-79e4-4bbf-86b6-dddeecbcdcae",
						"exec": [
							"pm.test('status code 404 when group does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Gothenburg\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e871",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e871"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1ca76766-62e1-44e8-8268-20dfc8500730",
						"exec": [
							"pm.test('status code 500 when group id is invalid', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Gothenburg\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/invalidGroupID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"invalidGroupID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE group by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0817615e-84e4-448a-97e2-03ccc263df53",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group2').to.eq(json.name);",
							"   pm.expect('Uppsala').to.eq(json.location);",
							"   pm.expect('5f63d49e36d3a338113801aa').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a group that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1e1ee68-2d47-4a2b-a24d-dba08c4604c2",
						"exec": [
							"pm.test('status code 500 when when trying to delete a group that does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f637b4fa41c610cb8c4a6ec",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f637b4fa41c610cb8c4a6ec"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a group with an invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "863bb786-fda8-4196-a68f-c38a948cef55",
						"exec": [
							"pm.test('status code 500 when when trying to delete a user without a proper ID', function(){",
							"    pm.response.to.have.status(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f63",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all groups - currently checking for two",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8acce23-463f-46c6-969e-0c4f89bdd6a7",
						"exec": [
							"pm.test('correct status code', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting the two users that exists in the collection', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(1).to.eq(json.n);",
							"   pm.expect(1).to.eq(json.ok);",
							"   pm.expect(1).to.eq(json.deletedCount);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78a391d0-715b-4b08-a8b8-3b973f923003",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"review_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Review created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has valid data\", function(){\r",
							"    pm.expect(jsonData.subject).to.eql('rough start');\r",
							"    pm.expect(jsonData.author).to.eql(\"5f620b07171db72678abb4b7\");\r",
							"    pm.expect(jsonData.reviewee).to.eql(\"5f620b07171db72628abb4b3\");\r",
							"    pm.expect(jsonData.rating).to.eql(5);\r",
							"    pm.expect(jsonData.subject).to.eql(\"rough start\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db72678abb4b7\", \"reviewee\": \"5f620b07171db72628abb4b3\", \"rating\": 5, \"subject\": \"rough start\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get review by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35b9a8df-8fd6-4593-9b40-621c0685e805",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review found\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review data has valid types\", function(){\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.reviewee).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.rating).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.subject).to.be.a(\"string\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "10e0da8f-2650-45aa-b3c2-799037371668",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Reviews found\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Patch review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84571d6b-79d6-4edc-a6a8-7257e58d9c5a",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has expected changes\", function(){\r",
							"    pm.expect(jsonData.subject).to.eql(\"Getting there\");\r",
							"    pm.expect(jsonData.rating).to.eql(10);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rating\": 10, \"subject\": \"Getting there\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch review with invalid rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12c8cd14-c572-476a-85cc-59848e525a67",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Couldn't update, invalid type\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"pm.test(\"Correct error message\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rating\": \"You think you can fool me?\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Put review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c82d640b-82f1-4815-b08c-b2cf2313dcd4",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has expected changes\", function(){\r",
							"    pm.expect(jsonData.author).to.eql(\"5f620b07171db75578abb4b2\");\r",
							"    pm.expect(jsonData.reviewee).to.eql(\"5f620b07271db77638abb4b1\");\r",
							"    pm.expect(jsonData.subject).to.eql(\"It works\");\r",
							"    pm.expect(jsonData.rating).to.eql(8);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db75578abb4b2\", \"reviewee\": \"5f620b07271db77638abb4b1\", \"rating\": 8, \"subject\": \"It works\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put review with invalid rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69e32d57-d44c-4a4e-b9b8-b0e7b73ccbd3",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db75578abb4b2\", \"reviewee\": \"5f620b07271db77638abb4b1\", \"rating\": \"heyy\", \"subject\": \"It works\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "036773cb-3e6b-41df-afa0-a5736cb86c43",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review deleted\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Post review for delete all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e1c7204e-9a61-46d8-a3e8-220d6ce3976e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db72678abb4b7\", \"reviewee\": \"5f620b07171db72628abb4b3\", \"rating\": 5, \"subject\": \"rough start\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Delete all reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6813c24-1cb6-455f-a816-9e56e9cdb2f5",
						"exec": [
							"pm.test(\"Review deleted\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get review with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ea2437b-03e8-4401-8c3e-3b54ac8bd62c",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review not found\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get reviews, none found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "50f15f4c-d600-44d1-ba80-6399132d69e9",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"No reviews found 404\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Review data has valid types\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"No reviews found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Delete user with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20bab657-20ae-498a-b7d5-6b6c2dc5632e",
						"exec": [
							"pm.test(\"Invalid ID to delete\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Post activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f27dc93-646d-45cf-b0cb-17bf7c8ba48f",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"correct activity created\", function(){\r",
							"    pm.expect(\"Junior Summer Soccer Teams70\").to.eq(json.createdActivity.name);\r",
							"    pm.expect(\"Soccer\").to.eq(json.createdActivity.activity_type);\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer Teams70\", \"activity_type\":\"Soccer\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2abfc79-a104-495f-931d-da1cc3d21abe",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "660a04cc-a6da-4583-87f3-69bca7e15349",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test(\"Correct activity response\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.activity_type).to.eql(pm.environment.get(\"activity_type\")); \r",
							"    }); \r",
							"\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities?activity_type=Soccer",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					],
					"query": [
						{
							"key": "activity_type",
							"value": "Soccer"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "non existant activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3979ee9a-452d-419d-845f-97309fd9e809",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"// assert certain error message "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/1f63a07deb8c0c2ee4b2dc1e",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"1f63a07deb8c0c2ee4b2dc1e"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4c0b7390-eb87-45e9-950c-ab598e4aac0b",
						"exec": [
							"pm.test(\"Correct activity response\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    }); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity PUT ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "92763349-5d62-4295-bcbd-834067a2d2ea",
						"exec": [
							"pm.test(\"correct status code when the activity existss \", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"correct json returned\", function(){\r",
							"    var json = pm.response.json();\r",
							"    pm.expect(\"Junior Summer Soccer 2022\").to.eq(json.name);\r",
							"    pm.expect(\"Soccer1\").to.eq(json.activity_type);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer 2022\", \"activity_type\" : \"Soccer1\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity PATCH ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5431827-3351-4961-93d2-03c7a28a23e5",
						"exec": [
							"pm.test(\"correct status when we patch\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"correct json returned when patching\", function(){\r",
							"    var json = pm.response.json();\r",
							"    pm.expect(\"hi hi\").to.eq(json.name);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"hi hi\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity DELETE ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "704b9df2-8f0c-4db3-8282-6b7ac08cb05c",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f2cb8ab-4aab-4888-b3d3-64aed593fcac",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"correct activity created\", function(){\r",
							"    pm.expect(\"Junior Summer Soccer Teams72\").to.eq(json.createdActivity.name);\r",
							"    pm.expect(\"Soccer\").to.eq(json.createdActivity.activity_type);\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer Teams72\", \"activity_type\":\"Soccer\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6a4d8176-2356-4043-8354-ac8ff9755269",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post activity for relationship",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93cb40c6-d543-49cc-9e4e-feb78904d2fe",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"rel_activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"New Activity\", \"activity_type\":\"Football\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post group for activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "885fc89e-e578-46aa-a370-bd8cf76afcb0",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"rel_group_id\", jsonData.createdGroup._id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"New Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\",\n    \"owner\": \"5f86bc212f4b1c64a11e952b\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups in activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ba9c8cd2-298e-4a92-8435-33faf53cb2e5",
						"exec": [
							"pm.test(\"GET all groups in specific activity\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups in activity Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b383904-511e-42fb-8d2a-99c24d501c8c",
						"exec": [
							"pm.test(\"GET one group in specific activity\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups/{{rel_group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups",
						"{{rel_group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE group in activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1376efef-6482-4515-b0ce-018e3c005d94",
						"exec": [
							"pm.test(\"Group deleted\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group Relationship\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities/{{rel_activity_id}}/groups/{{rel_group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{rel_activity_id}}",
						"groups",
						"{{rel_group_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "81a929c3-f728-4c35-954d-4235fa5022bd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4a1eb4b0-517e-4905-8fd7-191e211a8335",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}