{
	"info": {
		"_postman_id": "edce9573-2e4a-4c1a-a471-dab9e4384adb",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST a user (specifying admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "665b0aea-b34d-44a8-a6eb-923d07149646",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json._id);",
							"",
							"pm.test('correct status code when user does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a user', function(){",
							"   pm.expect('admin22').to.eq(json.createdUser.username);",
							"   pm.expect('pass').to.eq(json.createdUser.password);",
							"   pm.expect(true).to.eq(json.createdUser.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin22\",\"password\":\"pass\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (w/o specifying admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35dccf6d-1166-40b4-893a-cabe5f611d43",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"user_id\", json.createdUser._id);",
							"",
							"pm.test('correct status code when user does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a user', function(){",
							"   pm.expect('newuser').to.eq(json.createdUser.username);",
							"   pm.expect('pass').to.eq(json.createdUser.password);",
							"})",
							"",
							"pm.test('the default administrator permissions should be assigned from the backend', function(){",
							"    var json = pm.response.json();",
							"    pm.expect(false).to.eq(json.createdUser.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"newuser\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (specifying admin) but the user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de67c73d-b84c-412b-90b6-cce8bb8d3fc4",
						"exec": [
							"pm.test('status code 500 when user exists', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin22\",\"password\":\"pass\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a user (w/o specifying admin) but the user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a7fd9bb-fa75-4ce8-a379-6d5226659aff",
						"exec": [
							"pm.test('status code 500 when user exists', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"newuser\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET user with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e0ac7ded-1e1e-4fd2-805f-b8b1675beb5a",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('newuser').to.eq(json.username);",
							"   pm.expect('pass').to.eq(json.password);",
							"   pm.expect(false).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7213f29f-afa7-491e-acbb-51eb491c29b3",
						"exec": [
							"pm.test('correct status code when users do exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET when user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9e2c0998-9e72-410e-a59a-ddc581ec9a4a",
						"exec": [
							"pm.test('status code 404 when a user with the specified ID not found', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a user with an invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36bdb9b9-5045-4ef9-bd3b-9659413a3879",
						"exec": [
							"pm.test('status code 500 when when trying to delete a user without a proper ID', function(){",
							"    pm.response.to.have.status(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/id123",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"id123"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e96053c-5701-4db0-af14-69143e1fbde7",
						"exec": [
							"pm.test('correct status code when user does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when creating a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('new_user_put').to.eq(json.username);",
							"   pm.expect('new_pass_put').to.eq(json.password);",
							"   pm.expect(true).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with ID -  user does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c81fd22d-f6f4-4323-8159-b22650776603",
						"exec": [
							"pm.test('status code 404 when user does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/5f635f95f9243e0bf8c720e1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"5f635f95f9243e0bf8c720e1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1363a6ef-2358-437d-ab3d-07670d174c46",
						"exec": [
							"pm.test('status code 500 when user has invalid ID', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"new_user_put\",\"password\":\"new_pass_put\",\"admin\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with ID - changing admin permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd679f98-19a7-4423-97a7-621cc728bf91",
						"exec": [
							"pm.test('correct status code when user does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when patching a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(false).to.eq(json.admin);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with ID - user does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e801982-c799-476c-9127-7b3ed62ac887",
						"exec": [
							"pm.test('status code 404 when user does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/5f635f95f9243e0bf8c720e1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"5f635f95f9243e0bf8c720e1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c76f2fa-2965-436a-91d1-c5c2ef4a917e",
						"exec": [
							"pm.test('status code 500 when user id is invalid', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"admin\":false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/invalidID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"invalidID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a user by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "723ac8e9-e0f3-4deb-9e83-d82088173cf4",
						"exec": [
							"pm.test('correct status code when user does exist and DELETE them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('new_user_put').to.eq(json.username);",
							"   pm.expect('new_pass_put').to.eq(json.password);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all users - currently checking for one",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53dfd6ea-d497-4311-a1be-eab26dd43a78",
						"exec": [
							"pm.test('correct status code', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting the two users that exists in the collection', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(1).to.eq(json.n);",
							"   pm.expect(1).to.eq(json.ok);",
							"   pm.expect(1).to.eq(json.deletedCount);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2356568d-fb95-4d5b-ad45-3626142a6a48",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"group_id\", json.createdGroup._id);",
							"",
							"pm.test('correct status code when group does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   pm.expect('Group').to.eq(json.createdGroup.name);",
							"   pm.expect('Stockholm').to.eq(json.createdGroup.location);",
							"   pm.expect('Activity').to.eq(json.createdGroup.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.createdGroup.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.createdGroup.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"Activity\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12a5bc8e-f144-4e0b-91ab-328f5b043665",
						"exec": [
							"var json = pm.response.json();",
							"postman.setEnvironmentVariable(\"group_id\", json.createdGroup._id);",
							"",
							"pm.test('correct status code when group does not exist and POST successfully', function(){",
							"    pm.response.to.have.status(201);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   pm.expect('Group1').to.eq(json.createdGroup.name);",
							"   pm.expect('Gothenburg').to.eq(json.createdGroup.location);",
							"   pm.expect('Activity1').to.eq(json.createdGroup.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.createdGroup.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.createdGroup.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group1\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST a group but it exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36974809-9883-47e3-928d-9fc645c87362",
						"exec": [
							"pm.test('status code 500 when group exists', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group1\",\n    \"location\": \"Gothenburg\",\n    \"activity\": \"Activity1\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all groups",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36c71a17-e4ba-4f2c-accc-d92a4f4d4d9c",
						"exec": [
							"pm.test('correct status code when users do exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET group with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "662dff3b-96c4-478e-9dd6-4c30883f8f19",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group1').to.eq(json.name);",
							"   pm.expect('Gothenburg').to.eq(json.location);",
							"   pm.expect('Activity1').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET when group not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a08a6ea0-c654-49db-8ee9-5a6f37848762",
						"exec": [
							"pm.test('status code 404 when a group with the specified ID not found', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e878",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e878"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0604c16f-add6-4f7f-bb06-cf5fbbf84caa",
						"exec": [
							"pm.test('correct status code when group does not exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when creating a group', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group2').to.eq(json.name);",
							"   pm.expect('Stockholm').to.eq(json.location);",
							"   pm.expect('Activity2').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"Activity2\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with ID - group does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "848a1784-6b6b-47a7-92c4-9fa4cc6ebd84",
						"exec": [
							"pm.test('status code 404 when group does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"Activity2\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e871",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e871"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT group with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41ef477a-45d9-483a-83e8-88db57eb34cd",
						"exec": [
							"pm.test('status code 500 when group has invalid ID', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Group2\",\n    \"location\": \"Stockholm\",\n    \"activity\": \"Activity2\",\n    \"startDate\": \"2020-09-20T12:00:00.000Z\",\n    \"endDate\": \"2020-09-25T12:00:00.000Z\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/invalidGroupID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"invalidGroupID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with ID - changing location",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c196590-e848-429c-9a38-68cd444273aa",
						"exec": [
							"pm.test('correct status code when group does exist and PUT successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when patching a group', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(\"Uppsala\").to.eq(json.location);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Uppsala\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with ID - group does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23b166ed-05a2-4770-8c50-f18e89ca79e9",
						"exec": [
							"pm.test('status code 404 when group does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Gothenburg\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/5f63723308b4fe0aeaf7e871",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63723308b4fe0aeaf7e871"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH group with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a806613-4d42-40cb-b44c-c2184ddba117",
						"exec": [
							"pm.test('status code 500 when group id is invalid', function(){",
							"    pm.response.to.have.status(500);",
							"",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"location\": \"Gothenburg\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/invalidGroupID123456789",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"invalidGroupID123456789"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE group by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9931013f-8678-4967-90b0-f291a72809ac",
						"exec": [
							"pm.test('correct status code when user does exist and GET them successfully', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when getting a user', function(){",
							"   var json = pm.response.json();",
							"   pm.expect('Group2').to.eq(json.name);",
							"   pm.expect('Uppsala').to.eq(json.location);",
							"   pm.expect('Activity2').to.eq(json.activity);",
							"   pm.expect('2020-09-20T12:00:00.000Z').to.eq(json.startDate);",
							"   pm.expect('2020-09-25T12:00:00.000Z').to.eq(json.endDate);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{group_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a group that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f6edb76f-b8d3-4d1b-b54c-5cbddd888741",
						"exec": [
							"pm.test('status code 500 when when trying to delete a group that does not exist', function(){",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f637b4fa41c610cb8c4a6ec",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f637b4fa41c610cb8c4a6ec"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE a group with an invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d357ebbd-d823-45c5-acb0-7ec4b81caebe",
						"exec": [
							"pm.test('status code 500 when when trying to delete a user without a proper ID', function(){",
							"    pm.response.to.have.status(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/5f63",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"5f63"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all groups - currently checking for two",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e66d2b0e-ed00-4c65-b49e-8872e8a34a24",
						"exec": [
							"pm.test('correct status code', function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"pm.test('correct JSON returned when deleting the two users that exists in the collection', function(){",
							"   var json = pm.response.json();",
							"   pm.expect(1).to.eq(json.n);",
							"   pm.expect(1).to.eq(json.ok);",
							"   pm.expect(1).to.eq(json.deletedCount);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "971277f7-bfc0-412c-a2be-2b8decbbd16d",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"review_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Review created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has valid data\", function(){\r",
							"    pm.expect(jsonData.subject).to.eql('rough start');\r",
							"    pm.expect(jsonData.author).to.eql(\"5f620b07171db72678abb4b7\");\r",
							"    pm.expect(jsonData.reviewee).to.eql(\"5f620b07171db72628abb4b3\");\r",
							"    pm.expect(jsonData.rating).to.eql(5);\r",
							"    pm.expect(jsonData.subject).to.eql(\"rough start\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db72678abb4b7\", \"reviewee\": \"5f620b07171db72628abb4b3\", \"rating\": 5, \"subject\": \"rough start\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get review by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6e06bcec-b92c-4a2b-b67c-0984311d9329",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review found\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review data has valid types\", function(){\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.reviewee).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.rating).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.subject).to.be.a(\"string\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90b8ce8b-72bb-4f20-86f1-f93f60558688",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Reviews found\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Reviews parsed as json, is an object\", function(){\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Patch review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d687a54f-1c6f-4e77-a03d-b2cad6e40959",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has expected changes\", function(){\r",
							"    pm.expect(jsonData.subject).to.eql(\"Getting there\");\r",
							"    pm.expect(jsonData.rating).to.eql(10);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rating\": 10, \"subject\": \"Getting there\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch review with invalid rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "33d10673-7b4f-4770-a50b-6b9618ecac24",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Couldn't update, invalid type\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"pm.test(\"Correct error message\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rating\": \"You think you can fool me?\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Put review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "233b92e6-18b0-4a77-b276-081ca1b6734e",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Review has expected changes\", function(){\r",
							"    pm.expect(jsonData.author).to.eql(\"5f620b07171db75578abb4b2\");\r",
							"    pm.expect(jsonData.reviewee).to.eql(\"5f620b07271db77638abb4b1\");\r",
							"    pm.expect(jsonData.subject).to.eql(\"It works\");\r",
							"    pm.expect(jsonData.rating).to.eql(8);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db75578abb4b2\", \"reviewee\": \"5f620b07271db77638abb4b1\", \"rating\": 8, \"subject\": \"It works\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put review with invalid rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2dd7035e-5ee3-4047-901d-7209688e8336",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review patched\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "Application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db75578abb4b2\", \"reviewee\": \"5f620b07271db77638abb4b1\", \"rating\": \"heyy\", \"subject\": \"It works\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete review",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89b3ed63-3bfe-4861-b226-661278c5f6af",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review deleted\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Post review for delete all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c870631d-2478-4b49-925f-194e2c2aa1ba",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"author\": \"5f620b07171db72678abb4b7\", \"reviewee\": \"5f620b07171db72628abb4b3\", \"rating\": 5, \"subject\": \"rough start\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Delete all reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a80ebd68-e3c7-4da6-a45f-cf664e99268c",
						"exec": [
							"pm.test(\"Review deleted\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get review with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16a7b317-748d-4413-b9f8-c5b17459f09a",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Review not found\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Get reviews, none found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6371b8e-adbc-4673-9801-7ed4a00db649",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"No reviews found 404\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Review data has valid types\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"No reviews found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						""
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Delete user with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7732b5c7-ba2d-4738-9998-36d21f8e182c",
						"exec": [
							"pm.test(\"Invalid ID to delete\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/reviews/{{review_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"reviews",
						"{{review_id}}"
					]
				},
				"description": "Post review"
			},
			"response": []
		},
		{
			"name": "Post activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f8146632-b44f-4c7a-8df6-91c61e54e78b",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"correct activity created\", function(){\r",
							"    pm.expect(\"Junior Summer Soccer Teams70\").to.eq(json.createdActivity.name);\r",
							"    pm.expect(\"Soccer\").to.eq(json.createdActivity.activity_type);\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer Teams70\", \"activity_type\":\"Soccer\"}"
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f4da8c19-8098-4199-8812-c60ea82b12ae",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1ef449ed-0089-4484-97cd-3cb0cc387612",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test(\"Correct activity response\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.activity_type).to.eql(pm.environment.get(\"activity_type\")); \r",
							"    }); \r",
							"\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities?activity_type=Soccer",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					],
					"query": [
						{
							"key": "activity_type",
							"value": "Soccer"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "non existant activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83a60a58-b576-41bd-9787-e1040659da72",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"// assert certain error message "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/1f63a07deb8c0c2ee4b2dc1e",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"1f63a07deb8c0c2ee4b2dc1e"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity GET ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "91dcdf89-0f5c-49a1-813f-b6c22dd89687",
						"exec": [
							"pm.test(\"Correct activity response\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    }); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity PUT ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e7f1636c-4299-4dc4-9768-95102a1d479b",
						"exec": [
							"pm.test(\"correct status code when the activity existss \", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"correct json returned\", function(){\r",
							"    var json = pm.response.json();\r",
							"    pm.expect(\"Junior Summer Soccer 2022\").to.eq(json.name);\r",
							"    pm.expect(\"Soccer1\").to.eq(json.activity_type);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer 2022\", \"activity_type\" : \"Soccer1\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity PATCH ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c91d31fc-edf6-40df-961a-a63feec2059d",
						"exec": [
							"pm.test(\"correct status when we patch\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"correct json returned when patching\", function(){\r",
							"    var json = pm.response.json();\r",
							"    pm.expect(\"hi hi\").to.eq(json.name);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"hi hi\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity DELETE ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3bab3d2e-f6a6-406b-afcb-b66ae0868aa3",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2c308790-697d-4e54-95b6-78094d5cba02",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"activity_id\", jsonData.createdActivity._id);\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"correct activity created\", function(){\r",
							"    pm.expect(\"Junior Summer Soccer Teams72\").to.eq(json.createdActivity.name);\r",
							"    pm.expect(\"Soccer\").to.eq(json.createdActivity.activity_type);\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\" : \"Junior Summer Soccer Teams72\", \"activity_type\":\"Soccer\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/activities",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "activity DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "38d7dea0-66cb-4f17-a88a-221174f25aac",
						"exec": [
							"pm.test(\"Correct status code\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/activities/{{activity_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"activities",
						"{{activity_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8d7c03bd-838a-49c7-84c9-925af1fdda03",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ddd497e4-6749-4883-8940-82bbf8ef5e05",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}